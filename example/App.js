/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {Component} from 'react';
import {
  Platform,
  StyleSheet,
  Text,
  View,
  NativeModules,
  TouchableOpacity,
} from 'react-native';
import RnGoogleCast, {
  CastButton,
  EventEmitter,
  Constants,
} from 'rn-google-cast';

export default class App extends Component {
  state = {
    connected: false,
  };

  componentWillUnmount() {
    this.ec.remove();
  }

  componentDidMount() {
    RnGoogleCast.getCastState().then(state => {
      this.setConnected(state);
    });
    this.ec = EventEmitter.addListener(Constants.CAST_STATE_CHANGED, state => {
      this.setConnected(state);
    });
  }

  setConnected = data => {
    const connected = data === 'connected';
    this.setState({connected});
  };

  expand = () => {
    RnGoogleCast.launchExpandedControls();
  };

  getDevice = async () => {
    const data = await RnGoogleCast.getCastDevice();
    console.log(data);
  };

  cast = () => {
    // on IOS is REQUIRED to use all this props
    // optional props on IOS will be fixed later

    RnGoogleCast.castMedia({
      mediaUrl:
        'https://commondatastorage.googleapis.com/gtv-videos-bucket/CastVideos/mp4/BigBuckBunny.mp4',
      imageUrl:
        'https://commondatastorage.googleapis.com/gtv-videos-bucket/CastVideos/images/480x270/BigBuckBunny.jpg',
      title: 'Big Buck Bunny',
      subtitle:
        'A large and lovable rabbit deals with three tiny bullies, led by a flying squirrel, who are determined to squelch his happiness.',
      studio: 'Blender Foundation',
      streamDuration: 596, // seconds
      contentType: 'video/mp4', // default is "video/mp4" on Android
      playPosition: 10, // seconds
      customData: {
        // your custom object that will be passed to as customData to receiver
        customKey: 'customValue',
      },
    });
  };

  render() {
    const message = this.state.connected ? 'YES' : 'NO';
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆RnGoogleCast example☆</Text>
        <Text style={styles.instructions}>
          Is connected to ChromeCast?: {message}
        </Text>

        <CastButton style={styles.castButton} />

        {this.state.connected && (
          <TouchableOpacity onPress={this.cast} style={styles.button}>
            <Text style={styles.buttonLabel}>Cast Video Demo</Text>
          </TouchableOpacity>
        )}

        {this.state.connected && (
          <TouchableOpacity onPress={this.expand} style={styles.button}>
            <Text style={styles.buttonLabel}>Expanded Controls</Text>
          </TouchableOpacity>
        )}

        {this.state.connected && (
          <TouchableOpacity onPress={this.getDevice} style={styles.button}>
            <Text style={styles.buttonLabel}>Show Cast Device Info</Text>
          </TouchableOpacity>
        )}
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  button: {
    borderRadius: 10,
    padding: 10,
    marginVertical: 5,
    backgroundColor: '#4e8',
  },
  buttonLabel: {
    color: '#FFF',
    fontWeight: '600',
  },
  castButton: {
    width: 80,
    height: 80,
    backgroundColor: '#463589',
    tintColor: 'white',
    color: '#fff',
    borderBottomLeftRadius: 10,
    borderBottomRightRadius: 10,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
